name: ci pipeline #(name of the gitgub action workflow).

#triggering condition of github action workflow
on:
  push:

#permissions required for github action workflow to interact with GIT HUB
permissions:
  id-token: write #Github action will require write permission to write git hub security token to enter in github
  contents: read #github action will require read permission to access the content inside Github

jobs: #workflow starts from here
   
  #1st part of workflow
  Integration:
    name: continuous Integration #This is a user-defined name for the job. It is mainly for display purposes in the GitHub Actions interface
    runs-on: ubuntu-latest  #The ubuntu-latest option means that GitHub Actions will automatically select the latest available version of the Ubuntu runner (virtual machine) to execute the job
  
    steps: #This is a list of individual tasks or steps that will be executed in sequence as part of the job. 
    - name: checkout code  #The name attribute is again for display purposes
      uses: actions/checkout@v3 #is commonly used to check out the source code repository into the runner's working directory.


  #2nd part of workflow
  build-and-push-ecr-image:
    name: push to ecr 
    needs: Integration  # The needs keyword specifies that this job depends on the successful completion of the "Integration" job
    runs-on: ubuntu-latest

    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: install utilities  #This step installs additional utilities on the runner using the apt-get package manager. The jq and unzip tools are being installed
      run: |
       sudo apt-get update
       sudo apt-get install -y jq unzip   
       # this installs utilities jq and unzip on runner
       #jq is a lightweight and flexible command-line JSON processor. It is often used for parsing and manipulating JSON data.
       #unzip is for extracting compressed files in the ZIP format

    - name: configure aws credentials #login to aws
      uses: aws-actions/configure-aws-credentials@v1 #this is a  GitHub Actions action provided by AWS and it is used in a GitHub Actions workflow to configure AWS credentials
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}     

    - name: Login to amazon ecr
      id: login-ecr  #This assigns an identifier to the step. The id can be used to reference the output of this step later in the workflow
      uses: aws-actions/amazon-ecr-login@v1 #The .action is specifically designed to perform the login operation for Amazon Elastic Container Registry (ECR).

    - name: Build, tag and push image to ecr
      id: build-image
      env: #This specifies environment .variables .that., will be available to the steps within this job
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # It is pulling the registry URL from the output of the previous step, likely obtained during the ECR login step.
        ECR_REPOSITORY: ${{ secrets.REPOSITORY_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}   
        IMAGE_TAG: latest_1
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS...
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . #dot (.) refers to the current directory, meaning that the build context includes all the files in the current directory.
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG        
      


  #3rd part of workflow
  continuous-deployment:
    name: continuous deployment
    needs: build-and-push-ecr-image
    runs-on: ubuntu-latest

    steps:    
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1 #aws-actions: This is the GitHub organization or user namespace where the action is hosted.#configure-aws-credentials: This is the name of the GitHub Action.
      with:                                          
        aws-access-key-id: ${{ secretS.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to amezon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 

    - name: pull image
      id: pull-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} #THIS WILL GET YOU THE URL OF AWS ECR PAGE .
        ECR_REPOSITORY: ${{ secrets.REPOSITORY_NAME }}
        IMAGE_TAG: latest_1
      run: |
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: delete previous container
      run: |
        docker rm -f real-estate || true  #docker: This invokes the Docker, rm: This subcommand is used to remove Docker containers.
                                          #-f: This flag is short for --force..

    - name: push to docker container
      run: |
       docker run -d -p 8080:8080 --ipc="host" --name=real-estate -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.REPOSITORY_NAME }}:latest_1 